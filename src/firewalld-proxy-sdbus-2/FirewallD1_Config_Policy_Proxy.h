
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__firewalld_proxy_sdbus_2_FirewallD1_Config_Policy_Proxy_h__proxy__H__
#define __sdbuscpp__firewalld_proxy_sdbus_2_FirewallD1_Config_Policy_Proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace fedoraproject {
namespace FirewallD1 {
namespace config {

class policy_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.fedoraproject.FirewallD1.config.policy";

protected:
    policy_proxy(sdbus::IProxy& proxy)
        : m_proxy(proxy)
    {
    }

    policy_proxy(const policy_proxy&) = delete;
    policy_proxy& operator=(const policy_proxy&) = delete;
    policy_proxy(policy_proxy&&) = delete;
    policy_proxy& operator=(policy_proxy&&) = delete;

    ~policy_proxy() = default;

    void registerProxy()
    {
        m_proxy.uponSignal("Updated").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onUpdated(name); });
        m_proxy.uponSignal("Removed").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onRemoved(name); });
        m_proxy.uponSignal("Renamed").onInterface(INTERFACE_NAME).call([this](const std::string& name){ this->onRenamed(name); });
    }

    virtual void onUpdated(const std::string& name) = 0;
    virtual void onRemoved(const std::string& name) = 0;
    virtual void onRenamed(const std::string& name) = 0;

public:
    std::map<std::string, sdbus::Variant> getSettings()
    {
        std::map<std::string, sdbus::Variant> result;
        m_proxy.callMethod("getSettings").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void update(const std::map<std::string, sdbus::Variant>& settings)
    {
        m_proxy.callMethod("update").onInterface(INTERFACE_NAME).withArguments(settings);
    }

    void loadDefaults()
    {
        m_proxy.callMethod("loadDefaults").onInterface(INTERFACE_NAME);
    }

    void remove()
    {
        m_proxy.callMethod("remove").onInterface(INTERFACE_NAME);
    }

    void rename(const std::string& name)
    {
        m_proxy.callMethod("rename").onInterface(INTERFACE_NAME).withArguments(name);
    }

public:
    std::string name()
    {
        return m_proxy.getProperty("name").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string filename()
    {
        return m_proxy.getProperty("filename").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string path()
    {
        return m_proxy.getProperty("path").onInterface(INTERFACE_NAME).get<std::string>();
    }

    bool default_()
    {
        return m_proxy.getProperty("default").onInterface(INTERFACE_NAME).get<bool>();
    }

    bool builtin()
    {
        return m_proxy.getProperty("builtin").onInterface(INTERFACE_NAME).get<bool>();
    }

private:
    sdbus::IProxy& m_proxy;
};

}}}} // namespaces

#endif
