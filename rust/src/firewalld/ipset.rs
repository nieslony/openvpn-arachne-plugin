//! # D-Bus interface proxy for: `org.fedoraproject.FirewallD1.ipset`
//!
         //! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
         //! Source: `Interface '/org/fedoraproject/FirewallD1' from service 'org.fedoraproject.FirewallD1' on system bus`.
         //!
         //! You may prefer to adapt it, instead of using it verbatim.
         //!
         //! More information can be found in the [Writing a client proxy] section of the zbus
         //! documentation.
         //!
        //! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
             //! following zbus API can be used:
             //!
            //! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
             //! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
            //!
        //! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
        //! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
        use zbus::proxy;
        #[proxy(interface = "org.fedoraproject.FirewallD1.ipset", default_service = "org.fedoraproject.FirewallD1", default_path = "/org/fedoraproject/FirewallD1")]
trait ipset {

    /// addEntry method
    #[zbus(name = "addEntry")]
    fn add_entry(&self, ipset: &str, entry: &str) -> zbus::Result<()>;

    /// getEntries method
    #[zbus(name = "getEntries")]
    fn get_entries(&self, ipset: &str) -> zbus::Result<Vec<String>>;

    /// getIPSetSettings method
    #[zbus(name = "getIPSetSettings")]
    fn get_ipset_settings(&self, ipset: &str) -> zbus::Result<(String, String, String, String, std::collections::HashMap<String, String>, Vec<String>)>;

    /// getIPSets method
    #[zbus(name = "getIPSets")]
    fn get_ipsets(&self) -> zbus::Result<Vec<String>>;

    /// queryEntry method
    #[zbus(name = "queryEntry")]
    fn query_entry(&self, ipset: &str, entry: &str) -> zbus::Result<bool>;

    /// queryIPSet method
    #[zbus(name = "queryIPSet")]
    fn query_ipset(&self, ipset: &str) -> zbus::Result<bool>;

    /// removeEntry method
    #[zbus(name = "removeEntry")]
    fn remove_entry(&self, ipset: &str, entry: &str) -> zbus::Result<()>;

    /// setEntries method
    #[zbus(name = "setEntries")]
    fn set_entries(&self, ipset: &str, entries: &[&str]) -> zbus::Result<()>;

    /// EntryAdded signal
    #[zbus(signal)]
    fn entry_added(&self, ipset: &str, entry: &str) -> zbus::Result<()>;

    /// EntryRemoved signal
    #[zbus(signal)]
    fn entry_removed(&self, ipset: &str, entry: &str) -> zbus::Result<()>;
}
