//! # D-Bus interface proxy for: `org.fedoraproject.FirewallD1`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/fedoraproject/FirewallD1' from service 'org.fedoraproject.FirewallD1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.fedoraproject.FirewallD1",
    default_service = "org.fedoraproject.FirewallD1",
    default_path = "/org/fedoraproject/FirewallD1"
)]
trait FirewallD1 {
    /// authorizeAll method
    #[zbus(name = "authorizeAll")]
    fn authorize_all(&self) -> zbus::Result<()>;

    /// checkPermanentConfig method
    #[zbus(name = "checkPermanentConfig")]
    fn check_permanent_config(&self) -> zbus::Result<()>;

    /// completeReload method
    #[zbus(name = "completeReload")]
    fn complete_reload(&self) -> zbus::Result<()>;

    /// disablePanicMode method
    #[zbus(name = "disablePanicMode")]
    fn disable_panic_mode(&self) -> zbus::Result<()>;

    /// enablePanicMode method
    #[zbus(name = "enablePanicMode")]
    fn enable_panic_mode(&self) -> zbus::Result<()>;

    /// getAutomaticHelpers method
    #[zbus(name = "getAutomaticHelpers")]
    fn get_automatic_helpers(&self) -> zbus::Result<String>;

    /// getDefaultZone method
    #[zbus(name = "getDefaultZone")]
    fn get_default_zone(&self) -> zbus::Result<String>;

    /// getHelperSettings method
    #[zbus(name = "getHelperSettings")]
    fn get_helper_settings(
        &self,
        helper: &str,
    ) -> zbus::Result<(
        String,
        String,
        String,
        String,
        String,
        Vec<(String, String)>,
    )>;

    /// getHelpers method
    #[zbus(name = "getHelpers")]
    fn get_helpers(&self) -> zbus::Result<Vec<String>>;

    /// getIcmpTypeSettings method
    #[zbus(name = "getIcmpTypeSettings")]
    fn get_icmp_type_settings(
        &self,
        icmptype: &str,
    ) -> zbus::Result<(String, String, String, Vec<String>)>;

    /// getLogDenied method
    #[zbus(name = "getLogDenied")]
    fn get_log_denied(&self) -> zbus::Result<String>;

    /// getServiceSettings method
    #[zbus(name = "getServiceSettings")]
    #[allow(clippy::type_complexity)]
    fn get_service_settings(
        &self,
        service: &str,
    ) -> zbus::Result<(
        String,
        String,
        String,
        Vec<(String, String)>,
        Vec<String>,
        std::collections::HashMap<String, String>,
        Vec<String>,
        Vec<(String, String)>,
    )>;

    /// getServiceSettings2 method
    #[zbus(name = "getServiceSettings2")]
    fn get_service_settings2(
        &self,
        service: &str,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// getZoneSettings method
    #[zbus(name = "getZoneSettings")]
    #[allow(clippy::type_complexity)]
    fn get_zone_settings(
        &self,
        zone: &str,
    ) -> zbus::Result<(
        String,
        String,
        String,
        bool,
        String,
        Vec<String>,
        Vec<(String, String)>,
        Vec<String>,
        bool,
        Vec<(String, String, String, String)>,
        Vec<String>,
        Vec<String>,
        Vec<String>,
        Vec<String>,
        Vec<(String, String)>,
        bool,
    )>;

    /// listIcmpTypes method
    #[zbus(name = "listIcmpTypes")]
    fn list_icmp_types(&self) -> zbus::Result<Vec<String>>;

    /// listServices method
    #[zbus(name = "listServices")]
    fn list_services(&self) -> zbus::Result<Vec<String>>;

    /// queryPanicMode method
    #[zbus(name = "queryPanicMode")]
    fn query_panic_mode(&self) -> zbus::Result<bool>;

    /// reload method
    #[zbus(name = "reload")]
    fn reload(&self) -> zbus::Result<()>;

    /// resetToDefaults method
    #[zbus(name = "resetToDefaults")]
    fn reset_to_defaults(&self) -> zbus::Result<()>;

    /// runtimeToPermanent method
    #[zbus(name = "runtimeToPermanent")]
    fn runtime_to_permanent(&self) -> zbus::Result<()>;

    /// setAutomaticHelpers method
    #[zbus(name = "setAutomaticHelpers")]
    fn set_automatic_helpers(&self, value: &str) -> zbus::Result<()>;

    /// setDefaultZone method
    #[zbus(name = "setDefaultZone")]
    fn set_default_zone(&self, zone: &str) -> zbus::Result<()>;

    /// setLogDenied method
    #[zbus(name = "setLogDenied")]
    fn set_log_denied(&self, value: &str) -> zbus::Result<()>;

    /// AutomaticHelpersChanged signal
    #[zbus(signal)]
    fn automatic_helpers_changed(&self, value: &str) -> zbus::Result<()>;

    /// DefaultZoneChanged signal
    #[zbus(signal)]
    fn default_zone_changed(&self, zone: &str) -> zbus::Result<()>;

    /// LogDeniedChanged signal
    #[zbus(signal)]
    fn log_denied_changed(&self, value: &str) -> zbus::Result<()>;

    /// PanicModeDisabled signal
    #[zbus(signal)]
    fn panic_mode_disabled(&self) -> zbus::Result<()>;

    /// PanicModeEnabled signal
    #[zbus(signal)]
    fn panic_mode_enabled(&self) -> zbus::Result<()>;

    /// Reloaded signal
    #[zbus(signal)]
    fn reloaded(&self) -> zbus::Result<()>;

    /// BRIDGE property
    #[zbus(property, name = "BRIDGE")]
    fn bridge(&self) -> zbus::Result<bool>;

    /// IPSet property
    #[zbus(property, name = "IPSet")]
    fn ipset(&self) -> zbus::Result<bool>;

    /// IPSetTypes property
    #[zbus(property, name = "IPSetTypes")]
    fn ipset_types(&self) -> zbus::Result<Vec<String>>;

    /// IPv4 property
    #[zbus(property, name = "IPv4")]
    fn ipv4(&self) -> zbus::Result<bool>;

    /// IPv4ICMPTypes property
    #[zbus(property, name = "IPv4ICMPTypes")]
    fn ipv4_icmptypes(&self) -> zbus::Result<Vec<String>>;

    /// IPv6 property
    #[zbus(property, name = "IPv6")]
    fn ipv6(&self) -> zbus::Result<bool>;

    /// IPv6ICMPTypes property
    #[zbus(property, name = "IPv6ICMPTypes")]
    fn ipv6_icmptypes(&self) -> zbus::Result<Vec<String>>;

    /// IPv6_rpfilter property
    #[zbus(property, name = "IPv6_rpfilter")]
    fn ipv6_rpfilter(&self) -> zbus::Result<bool>;

    /// interface_version property
    #[zbus(property, name = "interface_version")]
    fn interface_version(&self) -> zbus::Result<String>;

    /// nf_conntrack_helper_setting property
    #[zbus(property, name = "nf_conntrack_helper_setting")]
    fn nf_conntrack_helper_setting(&self) -> zbus::Result<bool>;

    /// nf_conntrack_helpers property
    #[zbus(property, name = "nf_conntrack_helpers")]
    fn nf_conntrack_helpers(&self) -> zbus::Result<std::collections::HashMap<String, Vec<String>>>;

    /// nf_nat_helpers property
    #[zbus(property, name = "nf_nat_helpers")]
    fn nf_nat_helpers(&self) -> zbus::Result<std::collections::HashMap<String, Vec<String>>>;

    /// state property
    #[zbus(property, name = "state")]
    fn state(&self) -> zbus::Result<String>;

    /// version property
    #[zbus(property, name = "version")]
    fn version(&self) -> zbus::Result<String>;
}
