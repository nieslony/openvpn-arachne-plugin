//! # D-Bus interface proxy for: `org.fedoraproject.FirewallD1.config.direct`
//!
         //! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
         //! Source: `Interface '/org/fedoraproject/FirewallD1/config' from service 'org.fedoraproject.FirewallD1' on system bus`.
         //!
         //! You may prefer to adapt it, instead of using it verbatim.
         //!
         //! More information can be found in the [Writing a client proxy] section of the zbus
         //! documentation.
         //!
        //! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
             //! following zbus API can be used:
             //!
            //! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
             //! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
            //!
        //! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
        //! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
        use zbus::proxy;
        #[proxy(interface = "org.fedoraproject.FirewallD1.config.direct", default_service = "org.fedoraproject.FirewallD1", default_path = "/org/fedoraproject/FirewallD1/config")]
trait direct {

    /// addChain method
    #[zbus(name = "addChain")]
    fn add_chain(&self, ipv: &str, table: &str, chain: &str) -> zbus::Result<()>;

    /// addPassthrough method
    #[zbus(name = "addPassthrough")]
    fn add_passthrough(&self, ipv: &str, args: &[&str]) -> zbus::Result<()>;

    /// addRule method
    #[zbus(name = "addRule")]
    fn add_rule(&self, ipv: &str, table: &str, chain: &str, priority: i32, args: &[&str]) -> zbus::Result<()>;

    /// getAllChains method
    #[zbus(name = "getAllChains")]
    fn get_all_chains(&self) -> zbus::Result<Vec<(String, String, String)>>;

    /// getAllPassthroughs method
    #[zbus(name = "getAllPassthroughs")]
    fn get_all_passthroughs(&self) -> zbus::Result<Vec<(String, Vec<String>)>>;

    /// getAllRules method
    #[zbus(name = "getAllRules")]
    fn get_all_rules(&self) -> zbus::Result<Vec<(String, String, String, i32, Vec<String>)>>;

    /// getChains method
    #[zbus(name = "getChains")]
    fn get_chains(&self, ipv: &str, table: &str) -> zbus::Result<Vec<String>>;

    /// getPassthroughs method
    #[zbus(name = "getPassthroughs")]
    fn get_passthroughs(&self, ipv: &str) -> zbus::Result<Vec<Vec<String>>>;

    /// getRules method
    #[zbus(name = "getRules")]
    fn get_rules(&self, ipv: &str, table: &str, chain: &str) -> zbus::Result<Vec<(i32, Vec<String>)>>;

    /// getSettings method
    #[zbus(name = "getSettings")]
    #[allow(clippy::type_complexity)]
    fn get_settings(&self) -> zbus::Result<(Vec<(String, String, String)>, Vec<(String, String, String, i32, Vec<String>)>, Vec<(String, Vec<String>)>)>;

    /// queryChain method
    #[zbus(name = "queryChain")]
    fn query_chain(&self, ipv: &str, table: &str, chain: &str) -> zbus::Result<bool>;

    /// queryPassthrough method
    #[zbus(name = "queryPassthrough")]
    fn query_passthrough(&self, ipv: &str, args: &[&str]) -> zbus::Result<bool>;

    /// queryRule method
    #[zbus(name = "queryRule")]
    fn query_rule(&self, ipv: &str, table: &str, chain: &str, priority: i32, args: &[&str]) -> zbus::Result<bool>;

    /// removeChain method
    #[zbus(name = "removeChain")]
    fn remove_chain(&self, ipv: &str, table: &str, chain: &str) -> zbus::Result<()>;

    /// removePassthrough method
    #[zbus(name = "removePassthrough")]
    fn remove_passthrough(&self, ipv: &str, args: &[&str]) -> zbus::Result<()>;

    /// removeRule method
    #[zbus(name = "removeRule")]
    fn remove_rule(&self, ipv: &str, table: &str, chain: &str, priority: i32, args: &[&str]) -> zbus::Result<()>;

    /// removeRules method
    #[zbus(name = "removeRules")]
    fn remove_rules(&self, ipv: &str, table: &str, chain: &str) -> zbus::Result<()>;

    /// update method
    #[zbus(name = "update")]
    #[allow(clippy::type_complexity)]
    fn update(&self, settings: &(&[&(&str, &str, &str)], &[&(&str, &str, &str, i32, &[&str])], &[&(&str, &[&str])])) -> zbus::Result<()>;

    /// Updated signal
    #[zbus(signal)]
    fn updated(&self) -> zbus::Result<()>;
}
