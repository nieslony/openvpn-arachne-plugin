//! # D-Bus interface proxy for: `org.fedoraproject.FirewallD1.config.policies`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/fedoraproject/FirewallD1/config' from service 'org.fedoraproject.FirewallD1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.fedoraproject.FirewallD1.config.policies",
    default_service = "org.fedoraproject.FirewallD1",
    default_path = "/org/fedoraproject/FirewallD1/config"
)]
trait policies {
    /// addLockdownWhitelistCommand method
    #[zbus(name = "addLockdownWhitelistCommand")]
    fn add_lockdown_whitelist_command(&self, command: &str) -> zbus::Result<()>;

    /// addLockdownWhitelistContext method
    #[zbus(name = "addLockdownWhitelistContext")]
    fn add_lockdown_whitelist_context(&self, context: &str) -> zbus::Result<()>;

    /// addLockdownWhitelistUid method
    #[zbus(name = "addLockdownWhitelistUid")]
    fn add_lockdown_whitelist_uid(&self, uid: i32) -> zbus::Result<()>;

    /// addLockdownWhitelistUser method
    #[zbus(name = "addLockdownWhitelistUser")]
    fn add_lockdown_whitelist_user(&self, user: &str) -> zbus::Result<()>;

    /// getLockdownWhitelist method
    #[zbus(name = "getLockdownWhitelist")]
    fn get_lockdown_whitelist(
        &self,
    ) -> zbus::Result<(Vec<String>, Vec<String>, Vec<String>, Vec<i32>)>;

    /// getLockdownWhitelistCommands method
    #[zbus(name = "getLockdownWhitelistCommands")]
    fn get_lockdown_whitelist_commands(&self) -> zbus::Result<Vec<String>>;

    /// getLockdownWhitelistContexts method
    #[zbus(name = "getLockdownWhitelistContexts")]
    fn get_lockdown_whitelist_contexts(&self) -> zbus::Result<Vec<String>>;

    /// getLockdownWhitelistUids method
    #[zbus(name = "getLockdownWhitelistUids")]
    fn get_lockdown_whitelist_uids(&self) -> zbus::Result<Vec<i32>>;

    /// getLockdownWhitelistUsers method
    #[zbus(name = "getLockdownWhitelistUsers")]
    fn get_lockdown_whitelist_users(&self) -> zbus::Result<Vec<String>>;

    /// queryLockdownWhitelistCommand method
    #[zbus(name = "queryLockdownWhitelistCommand")]
    fn query_lockdown_whitelist_command(&self, command: &str) -> zbus::Result<bool>;

    /// queryLockdownWhitelistContext method
    #[zbus(name = "queryLockdownWhitelistContext")]
    fn query_lockdown_whitelist_context(&self, context: &str) -> zbus::Result<bool>;

    /// queryLockdownWhitelistUid method
    #[zbus(name = "queryLockdownWhitelistUid")]
    fn query_lockdown_whitelist_uid(&self, uid: i32) -> zbus::Result<bool>;

    /// queryLockdownWhitelistUser method
    #[zbus(name = "queryLockdownWhitelistUser")]
    fn query_lockdown_whitelist_user(&self, user: &str) -> zbus::Result<bool>;

    /// removeLockdownWhitelistCommand method
    #[zbus(name = "removeLockdownWhitelistCommand")]
    fn remove_lockdown_whitelist_command(&self, command: &str) -> zbus::Result<()>;

    /// removeLockdownWhitelistContext method
    #[zbus(name = "removeLockdownWhitelistContext")]
    fn remove_lockdown_whitelist_context(&self, context: &str) -> zbus::Result<()>;

    /// removeLockdownWhitelistUid method
    #[zbus(name = "removeLockdownWhitelistUid")]
    fn remove_lockdown_whitelist_uid(&self, uid: i32) -> zbus::Result<()>;

    /// removeLockdownWhitelistUser method
    #[zbus(name = "removeLockdownWhitelistUser")]
    fn remove_lockdown_whitelist_user(&self, user: &str) -> zbus::Result<()>;

    /// setLockdownWhitelist method
    #[zbus(name = "setLockdownWhitelist")]
    fn set_lockdown_whitelist(
        &self,
        settings: &(&[&str], &[&str], &[&str], &[i32]),
    ) -> zbus::Result<()>;

    /// LockdownWhitelistUpdated signal
    #[zbus(signal)]
    fn lockdown_whitelist_updated(&self) -> zbus::Result<()>;
}
