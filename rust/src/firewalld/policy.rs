//! # D-Bus interface proxy for: `org.fedoraproject.FirewallD1.policy`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/fedoraproject/FirewallD1' from service 'org.fedoraproject.FirewallD1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.fedoraproject.FirewallD1.policy",
    default_service = "org.fedoraproject.FirewallD1",
    default_path = "/org/fedoraproject/FirewallD1"
)]
trait policy {
    /// getActivePolicies method
    #[zbus(name = "getActivePolicies")]
    fn get_active_policies(
        &self,
    ) -> zbus::Result<
        std::collections::HashMap<String, std::collections::HashMap<String, Vec<String>>>,
    >;

    /// getPolicies method
    #[zbus(name = "getPolicies")]
    fn get_policies(&self) -> zbus::Result<Vec<String>>;

    /// getPolicySettings method
    #[zbus(name = "getPolicySettings")]
    fn get_policy_settings(
        &self,
        policy: &str,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// setPolicySettings method
    #[zbus(name = "setPolicySettings")]
    fn set_policy_settings(
        &self,
        policy: &str,
        settings: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// PolicyUpdated signal
    #[zbus(signal)]
    fn policy_updated(
        &self,
        policy: &str,
        settings: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;
}
