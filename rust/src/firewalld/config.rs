//! # D-Bus interface proxy for: `org.fedoraproject.FirewallD1.config`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/fedoraproject/FirewallD1/config' from service 'org.fedoraproject.FirewallD1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.fedoraproject.FirewallD1.config",
    default_service = "org.fedoraproject.FirewallD1",
    default_path = "/org/fedoraproject/FirewallD1/config"
)]
trait config {
    /// addHelper method
    #[zbus(name = "addHelper")]
    fn add_helper(
        &self,
        helper: &str,
        settings: &(&str, &str, &str, &str, &str, &[&(&str, &str)]),
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// addIPSet method
    #[zbus(name = "addIPSet")]
    fn add_ipset(
        &self,
        ipset: &str,
        settings: &(
            &str,
            &str,
            &str,
            &str,
            std::collections::HashMap<&str, &str>,
            &[&str],
        ),
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// addIcmpType method
    #[zbus(name = "addIcmpType")]
    fn add_icmp_type(
        &self,
        icmptype: &str,
        settings: &(&str, &str, &str, &[&str]),
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// addPolicy method
    #[zbus(name = "addPolicy")]
    fn add_policy(
        &self,
        policy: &str,
        settings: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// addService method
    #[zbus(name = "addService")]
    #[allow(clippy::type_complexity)]
    fn add_service(
        &self,
        service: &str,
        settings: &(
            &str,
            &str,
            &str,
            &[&(&str, &str)],
            &[&str],
            std::collections::HashMap<&str, &str>,
            &[&str],
            &[&(&str, &str)],
        ),
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// addService2 method
    #[zbus(name = "addService2")]
    fn add_service2(
        &self,
        service: &str,
        settings: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// addZone method
    #[zbus(name = "addZone")]
    #[allow(clippy::type_complexity)]
    fn add_zone(
        &self,
        zone: &str,
        settings: &(
            &str,
            &str,
            &str,
            bool,
            &str,
            &[&str],
            &[&(&str, &str)],
            &[&str],
            bool,
            &[&(&str, &str, &str, &str)],
            &[&str],
            &[&str],
            &[&str],
            &[&str],
            &[&(&str, &str)],
            bool,
        ),
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// addZone2 method
    #[zbus(name = "addZone2")]
    fn add_zone2(
        &self,
        zone: &str,
        settings: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// getHelperByName method
    #[zbus(name = "getHelperByName")]
    fn get_helper_by_name(&self, helper: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// getHelperNames method
    #[zbus(name = "getHelperNames")]
    fn get_helper_names(&self) -> zbus::Result<Vec<String>>;

    /// getIPSetByName method
    #[zbus(name = "getIPSetByName")]
    fn get_ipset_by_name(&self, ipset: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// getIPSetNames method
    #[zbus(name = "getIPSetNames")]
    fn get_ipset_names(&self) -> zbus::Result<Vec<String>>;

    /// getIcmpTypeByName method
    #[zbus(name = "getIcmpTypeByName")]
    fn get_icmp_type_by_name(
        &self,
        icmptype: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// getIcmpTypeNames method
    #[zbus(name = "getIcmpTypeNames")]
    fn get_icmp_type_names(&self) -> zbus::Result<Vec<String>>;

    /// getPolicyByName method
    #[zbus(name = "getPolicyByName")]
    fn get_policy_by_name(&self, policy: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// getPolicyNames method
    #[zbus(name = "getPolicyNames")]
    fn get_policy_names(&self) -> zbus::Result<Vec<String>>;

    /// getServiceByName method
    #[zbus(name = "getServiceByName")]
    fn get_service_by_name(&self, service: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// getServiceNames method
    #[zbus(name = "getServiceNames")]
    fn get_service_names(&self) -> zbus::Result<Vec<String>>;

    /// getZoneByName method
    #[zbus(name = "getZoneByName")]
    fn get_zone_by_name(&self, zone: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// getZoneNames method
    #[zbus(name = "getZoneNames")]
    fn get_zone_names(&self) -> zbus::Result<Vec<String>>;

    /// getZoneOfInterface method
    #[zbus(name = "getZoneOfInterface")]
    fn get_zone_of_interface(&self, iface: &str) -> zbus::Result<String>;

    /// getZoneOfSource method
    #[zbus(name = "getZoneOfSource")]
    fn get_zone_of_source(&self, source: &str) -> zbus::Result<String>;

    /// listHelpers method
    #[zbus(name = "listHelpers")]
    fn list_helpers(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// listIPSets method
    #[zbus(name = "listIPSets")]
    fn list_ipsets(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// listIcmpTypes method
    #[zbus(name = "listIcmpTypes")]
    fn list_icmp_types(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// listPolicies method
    #[zbus(name = "listPolicies")]
    fn list_policies(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// listServices method
    #[zbus(name = "listServices")]
    fn list_services(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// listZones method
    #[zbus(name = "listZones")]
    fn list_zones(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// HelperAdded signal
    #[zbus(signal)]
    fn helper_added(&self, helper: &str) -> zbus::Result<()>;

    /// IPSetAdded signal
    #[zbus(signal, name = "IPSetAdded")]
    fn ipset_added(&self, ipset: &str) -> zbus::Result<()>;

    /// IcmpTypeAdded signal
    #[zbus(signal)]
    fn icmp_type_added(&self, icmptype: &str) -> zbus::Result<()>;

    /// PolicyAdded signal
    #[zbus(signal)]
    fn policy_added(&self, policy: &str) -> zbus::Result<()>;

    /// ServiceAdded signal
    #[zbus(signal)]
    fn service_added(&self, service: &str) -> zbus::Result<()>;

    /// ZoneAdded signal
    #[zbus(signal)]
    fn zone_added(&self, zone: &str) -> zbus::Result<()>;

    /// AllowZoneDrifting property
    #[zbus(property)]
    fn allow_zone_drifting(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_allow_zone_drifting(&self, value: &str) -> zbus::Result<()>;

    /// AutomaticHelpers property
    #[zbus(property)]
    fn automatic_helpers(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_automatic_helpers(&self, value: &str) -> zbus::Result<()>;

    /// CleanupModulesOnExit property
    #[zbus(property)]
    fn cleanup_modules_on_exit(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_cleanup_modules_on_exit(&self, value: &str) -> zbus::Result<()>;

    /// CleanupOnExit property
    #[zbus(property)]
    fn cleanup_on_exit(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_cleanup_on_exit(&self, value: &str) -> zbus::Result<()>;

    /// DefaultZone property
    #[zbus(property)]
    fn default_zone(&self) -> zbus::Result<String>;

    /// FirewallBackend property
    #[zbus(property)]
    fn firewall_backend(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_firewall_backend(&self, value: &str) -> zbus::Result<()>;

    /// FlushAllOnReload property
    #[zbus(property)]
    fn flush_all_on_reload(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_flush_all_on_reload(&self, value: &str) -> zbus::Result<()>;

    /// IPv6_rpfilter property
    #[zbus(property, name = "IPv6_rpfilter")]
    fn ipv6_rpfilter(&self) -> zbus::Result<String>;
    #[zbus(property, name = "IPv6_rpfilter")]
    fn set_ipv6_rpfilter(&self, value: &str) -> zbus::Result<()>;

    /// IndividualCalls property
    #[zbus(property)]
    fn individual_calls(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_individual_calls(&self, value: &str) -> zbus::Result<()>;

    /// Lockdown property
    #[zbus(property)]
    fn lockdown(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_lockdown(&self, value: &str) -> zbus::Result<()>;

    /// LogDenied property
    #[zbus(property)]
    fn log_denied(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_log_denied(&self, value: &str) -> zbus::Result<()>;

    /// MinimalMark property
    #[zbus(property)]
    fn minimal_mark(&self) -> zbus::Result<i32>;
    #[zbus(property)]
    fn set_minimal_mark(&self, value: i32) -> zbus::Result<()>;

    /// NftablesCounters property
    #[zbus(property)]
    fn nftables_counters(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_nftables_counters(&self, value: &str) -> zbus::Result<()>;

    /// NftablesFlowtable property
    #[zbus(property)]
    fn nftables_flowtable(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_nftables_flowtable(&self, value: &str) -> zbus::Result<()>;

    /// RFC3964_IPv4 property
    #[zbus(property, name = "RFC3964_IPv4")]
    fn rfc3964_ipv4(&self) -> zbus::Result<String>;
    #[zbus(property, name = "RFC3964_IPv4")]
    fn set_rfc3964_ipv4(&self, value: &str) -> zbus::Result<()>;
}
