//! # D-Bus interface proxy for: `org.fedoraproject.FirewallD1.zone`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/fedoraproject/FirewallD1' from service 'org.fedoraproject.FirewallD1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.fedoraproject.FirewallD1.zone",
    default_service = "org.fedoraproject.FirewallD1",
    default_path = "/org/fedoraproject/FirewallD1"
)]
trait zone {
    /// addForwardPort method
    #[zbus(name = "addForwardPort")]
    #[allow(clippy::too_many_arguments)]
    fn add_forward_port(
        &self,
        zone: &str,
        port: &str,
        protocol: &str,
        toport: &str,
        toaddr: &str,
        timeout: i32,
    ) -> zbus::Result<String>;

    /// addIcmpBlock method
    #[zbus(name = "addIcmpBlock")]
    fn add_icmp_block(&self, zone: &str, icmp: &str, timeout: i32) -> zbus::Result<String>;

    /// addIcmpBlockInversion method
    #[zbus(name = "addIcmpBlockInversion")]
    fn add_icmp_block_inversion(&self, zone: &str) -> zbus::Result<String>;

    /// addInterface method
    #[zbus(name = "addInterface")]
    fn add_interface(&self, zone: &str, interface: &str) -> zbus::Result<String>;

    /// addMasquerade method
    #[zbus(name = "addMasquerade")]
    fn add_masquerade(&self, zone: &str, timeout: i32) -> zbus::Result<String>;

    /// addPort method
    #[zbus(name = "addPort")]
    fn add_port(
        &self,
        zone: &str,
        port: &str,
        protocol: &str,
        timeout: i32,
    ) -> zbus::Result<String>;

    /// addProtocol method
    #[zbus(name = "addProtocol")]
    fn add_protocol(&self, zone: &str, protocol: &str, timeout: i32) -> zbus::Result<String>;

    /// addRichRule method
    #[zbus(name = "addRichRule")]
    fn add_rich_rule(&self, zone: &str, rule: &str, timeout: i32) -> zbus::Result<String>;

    /// addService method
    #[zbus(name = "addService")]
    fn add_service(&self, zone: &str, service: &str, timeout: i32) -> zbus::Result<String>;

    /// addSource method
    #[zbus(name = "addSource")]
    fn add_source(&self, zone: &str, source: &str) -> zbus::Result<String>;

    /// addSourcePort method
    #[zbus(name = "addSourcePort")]
    fn add_source_port(
        &self,
        zone: &str,
        port: &str,
        protocol: &str,
        timeout: i32,
    ) -> zbus::Result<String>;

    /// changeZone method
    #[zbus(name = "changeZone")]
    fn change_zone(&self, zone: &str, interface: &str) -> zbus::Result<String>;

    /// changeZoneOfInterface method
    #[zbus(name = "changeZoneOfInterface")]
    fn change_zone_of_interface(&self, zone: &str, interface: &str) -> zbus::Result<String>;

    /// changeZoneOfSource method
    #[zbus(name = "changeZoneOfSource")]
    fn change_zone_of_source(&self, zone: &str, source: &str) -> zbus::Result<String>;

    /// getActiveZones method
    #[zbus(name = "getActiveZones")]
    fn get_active_zones(
        &self,
    ) -> zbus::Result<
        std::collections::HashMap<String, std::collections::HashMap<String, Vec<String>>>,
    >;

    /// getForwardPorts method
    #[zbus(name = "getForwardPorts")]
    fn get_forward_ports(&self, zone: &str) -> zbus::Result<Vec<Vec<String>>>;

    /// getIcmpBlocks method
    #[zbus(name = "getIcmpBlocks")]
    fn get_icmp_blocks(&self, zone: &str) -> zbus::Result<Vec<String>>;

    /// getInterfaces method
    #[zbus(name = "getInterfaces")]
    fn get_interfaces(&self, zone: &str) -> zbus::Result<Vec<String>>;

    /// getPorts method
    #[zbus(name = "getPorts")]
    fn get_ports(&self, zone: &str) -> zbus::Result<Vec<Vec<String>>>;

    /// getProtocols method
    #[zbus(name = "getProtocols")]
    fn get_protocols(&self, zone: &str) -> zbus::Result<Vec<String>>;

    /// getRichRules method
    #[zbus(name = "getRichRules")]
    fn get_rich_rules(&self, zone: &str) -> zbus::Result<Vec<String>>;

    /// getServices method
    #[zbus(name = "getServices")]
    fn get_services(&self, zone: &str) -> zbus::Result<Vec<String>>;

    /// getSourcePorts method
    #[zbus(name = "getSourcePorts")]
    fn get_source_ports(&self, zone: &str) -> zbus::Result<Vec<Vec<String>>>;

    /// getSources method
    #[zbus(name = "getSources")]
    fn get_sources(&self, zone: &str) -> zbus::Result<Vec<String>>;

    /// getZoneOfInterface method
    #[zbus(name = "getZoneOfInterface")]
    fn get_zone_of_interface(&self, interface: &str) -> zbus::Result<String>;

    /// getZoneOfSource method
    #[zbus(name = "getZoneOfSource")]
    fn get_zone_of_source(&self, source: &str) -> zbus::Result<String>;

    /// getZoneSettings2 method
    #[zbus(name = "getZoneSettings2")]
    fn get_zone_settings2(
        &self,
        zone: &str,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// getZones method
    #[zbus(name = "getZones")]
    fn get_zones(&self) -> zbus::Result<Vec<String>>;

    /// isImmutable method
    #[zbus(name = "isImmutable")]
    fn is_immutable(&self, zone: &str) -> zbus::Result<bool>;

    /// queryForwardPort method
    #[zbus(name = "queryForwardPort")]
    fn query_forward_port(
        &self,
        zone: &str,
        port: &str,
        protocol: &str,
        toport: &str,
        toaddr: &str,
    ) -> zbus::Result<bool>;

    /// queryIcmpBlock method
    #[zbus(name = "queryIcmpBlock")]
    fn query_icmp_block(&self, zone: &str, icmp: &str) -> zbus::Result<bool>;

    /// queryIcmpBlockInversion method
    #[zbus(name = "queryIcmpBlockInversion")]
    fn query_icmp_block_inversion(&self, zone: &str) -> zbus::Result<bool>;

    /// queryInterface method
    #[zbus(name = "queryInterface")]
    fn query_interface(&self, zone: &str, interface: &str) -> zbus::Result<bool>;

    /// queryMasquerade method
    #[zbus(name = "queryMasquerade")]
    fn query_masquerade(&self, zone: &str) -> zbus::Result<bool>;

    /// queryPort method
    #[zbus(name = "queryPort")]
    fn query_port(&self, zone: &str, port: &str, protocol: &str) -> zbus::Result<bool>;

    /// queryProtocol method
    #[zbus(name = "queryProtocol")]
    fn query_protocol(&self, zone: &str, protocol: &str) -> zbus::Result<bool>;

    /// queryRichRule method
    #[zbus(name = "queryRichRule")]
    fn query_rich_rule(&self, zone: &str, rule: &str) -> zbus::Result<bool>;

    /// queryService method
    #[zbus(name = "queryService")]
    fn query_service(&self, zone: &str, service: &str) -> zbus::Result<bool>;

    /// querySource method
    #[zbus(name = "querySource")]
    fn query_source(&self, zone: &str, source: &str) -> zbus::Result<bool>;

    /// querySourcePort method
    #[zbus(name = "querySourcePort")]
    fn query_source_port(&self, zone: &str, port: &str, protocol: &str) -> zbus::Result<bool>;

    /// removeForwardPort method
    #[zbus(name = "removeForwardPort")]
    fn remove_forward_port(
        &self,
        zone: &str,
        port: &str,
        protocol: &str,
        toport: &str,
        toaddr: &str,
    ) -> zbus::Result<String>;

    /// removeIcmpBlock method
    #[zbus(name = "removeIcmpBlock")]
    fn remove_icmp_block(&self, zone: &str, icmp: &str) -> zbus::Result<String>;

    /// removeIcmpBlockInversion method
    #[zbus(name = "removeIcmpBlockInversion")]
    fn remove_icmp_block_inversion(&self, zone: &str) -> zbus::Result<String>;

    /// removeInterface method
    #[zbus(name = "removeInterface")]
    fn remove_interface(&self, zone: &str, interface: &str) -> zbus::Result<String>;

    /// removeMasquerade method
    #[zbus(name = "removeMasquerade")]
    fn remove_masquerade(&self, zone: &str) -> zbus::Result<String>;

    /// removePort method
    #[zbus(name = "removePort")]
    fn remove_port(&self, zone: &str, port: &str, protocol: &str) -> zbus::Result<String>;

    /// removeProtocol method
    #[zbus(name = "removeProtocol")]
    fn remove_protocol(&self, zone: &str, protocol: &str) -> zbus::Result<String>;

    /// removeRichRule method
    #[zbus(name = "removeRichRule")]
    fn remove_rich_rule(&self, zone: &str, rule: &str) -> zbus::Result<String>;

    /// removeService method
    #[zbus(name = "removeService")]
    fn remove_service(&self, zone: &str, service: &str) -> zbus::Result<String>;

    /// removeSource method
    #[zbus(name = "removeSource")]
    fn remove_source(&self, zone: &str, source: &str) -> zbus::Result<String>;

    /// removeSourcePort method
    #[zbus(name = "removeSourcePort")]
    fn remove_source_port(&self, zone: &str, port: &str, protocol: &str) -> zbus::Result<String>;

    /// setZoneSettings2 method
    #[zbus(name = "setZoneSettings2")]
    fn set_zone_settings2(
        &self,
        zone: &str,
        settings: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// ForwardPortAdded signal
    #[zbus(signal)]
    fn forward_port_added(
        &self,
        zone: &str,
        port: &str,
        protocol: &str,
        toport: &str,
        toaddr: &str,
        timeout: i32,
    ) -> zbus::Result<()>;

    /// ForwardPortRemoved signal
    #[zbus(signal)]
    fn forward_port_removed(
        &self,
        zone: &str,
        port: &str,
        protocol: &str,
        toport: &str,
        toaddr: &str,
    ) -> zbus::Result<()>;

    /// IcmpBlockAdded signal
    #[zbus(signal)]
    fn icmp_block_added(&self, zone: &str, icmp: &str, timeout: i32) -> zbus::Result<()>;

    /// IcmpBlockInversionAdded signal
    #[zbus(signal)]
    fn icmp_block_inversion_added(&self, zone: &str) -> zbus::Result<()>;

    /// IcmpBlockInversionRemoved signal
    #[zbus(signal)]
    fn icmp_block_inversion_removed(&self, zone: &str) -> zbus::Result<()>;

    /// IcmpBlockRemoved signal
    #[zbus(signal)]
    fn icmp_block_removed(&self, zone: &str, icmp: &str) -> zbus::Result<()>;

    /// InterfaceAdded signal
    #[zbus(signal)]
    fn interface_added(&self, zone: &str, interface: &str) -> zbus::Result<()>;

    /// InterfaceRemoved signal
    #[zbus(signal)]
    fn interface_removed(&self, zone: &str, interface: &str) -> zbus::Result<()>;

    /// MasqueradeAdded signal
    #[zbus(signal)]
    fn masquerade_added(&self, zone: &str, timeout: i32) -> zbus::Result<()>;

    /// MasqueradeRemoved signal
    #[zbus(signal)]
    fn masquerade_removed(&self, zone: &str) -> zbus::Result<()>;

    /// PortAdded signal
    #[zbus(signal)]
    fn port_added(&self, zone: &str, port: &str, protocol: &str, timeout: i32) -> zbus::Result<()>;

    /// PortRemoved signal
    #[zbus(signal)]
    fn port_removed(&self, zone: &str, port: &str, protocol: &str) -> zbus::Result<()>;

    /// ProtocolAdded signal
    #[zbus(signal)]
    fn protocol_added(&self, zone: &str, protocol: &str, timeout: i32) -> zbus::Result<()>;

    /// ProtocolRemoved signal
    #[zbus(signal)]
    fn protocol_removed(&self, zone: &str, protocol: &str) -> zbus::Result<()>;

    /// RichRuleAdded signal
    #[zbus(signal)]
    fn rich_rule_added(&self, zone: &str, rule: &str, timeout: i32) -> zbus::Result<()>;

    /// RichRuleRemoved signal
    #[zbus(signal)]
    fn rich_rule_removed(&self, zone: &str, rule: &str) -> zbus::Result<()>;

    /// ServiceAdded signal
    #[zbus(signal)]
    fn service_added(&self, zone: &str, service: &str, timeout: i32) -> zbus::Result<()>;

    /// ServiceRemoved signal
    #[zbus(signal)]
    fn service_removed(&self, zone: &str, service: &str) -> zbus::Result<()>;

    /// SourceAdded signal
    #[zbus(signal)]
    fn source_added(&self, zone: &str, source: &str) -> zbus::Result<()>;

    /// SourcePortAdded signal
    #[zbus(signal)]
    fn source_port_added(
        &self,
        zone: &str,
        port: &str,
        protocol: &str,
        timeout: i32,
    ) -> zbus::Result<()>;

    /// SourcePortRemoved signal
    #[zbus(signal)]
    fn source_port_removed(&self, zone: &str, port: &str, protocol: &str) -> zbus::Result<()>;

    /// SourceRemoved signal
    #[zbus(signal)]
    fn source_removed(&self, zone: &str, source: &str) -> zbus::Result<()>;

    /// ZoneChanged signal
    #[zbus(signal)]
    fn zone_changed(&self, zone: &str, interface: &str) -> zbus::Result<()>;

    /// ZoneOfInterfaceChanged signal
    #[zbus(signal)]
    fn zone_of_interface_changed(&self, zone: &str, interface: &str) -> zbus::Result<()>;

    /// ZoneOfSourceChanged signal
    #[zbus(signal)]
    fn zone_of_source_changed(&self, zone: &str, source: &str) -> zbus::Result<()>;

    /// ZoneUpdated signal
    #[zbus(signal)]
    fn zone_updated(
        &self,
        zone: &str,
        settings: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;
}
